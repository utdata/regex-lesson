[
  {
    "objectID": "cheatsheet.html",
    "href": "cheatsheet.html",
    "title": "Cheatsheet",
    "section": "",
    "text": "Token\nUse\n\n\n\n\n[abc]\nA single character of: a, b, or c\n\n\n[^abc]\nAny single character except: a, b, or c\n\n\n[a-z]\nAny single character in the range a-z\n\n\n[a-zA-Z]\nAny single char in the range a-z or A-Z\n\n\n(…)\nCapture everything enclosed\n\n\n(a|b)\na or b\n\n\na?\nZero or one of a (lazy)\n\n\na*\nZero or more of a (greedy)\n\n\na+\nOne or more of a\n\n\na{3}\nExactly 3 of a\n\n\na{3,}\n3 or more of a\n\n\na{3,6}\nBetween 3 and 6 of a\n\n\n^\nStart of line\n\n\n$\nEnd of line\n\n\n\\A\nStart of string\n\n\n\\z\nEnd of string\n\n\n.\nAny single character\n\n\n\\s\nAny whitespace character\n\n\n\\S\nAny non-whitespace character\n\n\n\\d\nAny digit\n\n\n\\D\nAny non-digit\n\n\n\\w\nAny word character (letter, number, underscore)\n\n\n\\W\nAny non-word character\n\n\n\\b\nAny word boundary"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Wrangling Regular Expressions",
    "section": "",
    "text": "Important\n\n\n\nThis is a backup lesson in case the internet is not available. It’s designed to present from the downloaded repo using Visual Studio code. It is not as cool as https://regex101.com, but it will do.\nA regular expression (regex or regexp for short) is a special text string for describing a search pattern. Searching text with a pattern instead for a specific string of characters can be VERY useful for cleaning data. The concept is available in many programming languages and tools."
  },
  {
    "objectID": "index.html#key-concept-patterns",
    "href": "index.html#key-concept-patterns",
    "title": "Wrangling Regular Expressions",
    "section": "Key concept: patterns",
    "text": "Key concept: patterns\nLet’s say you have a list of phone numbers in 10-digit format – 512-555-1212 – but you want the area code to be in parentheses: (512) 555-1212. You could do a simple search of the “512” area code followed by a dash “512-” and replace it with an area code in parentheses and a space: “(512)”.\nBut what if there are different area codes in the list?\n512-555-1211\n301-333-1212\n410-123-1213\nWith regular expressions, you can search for a pattern of characters. Instead of searching just for 512-, you can look for “three numbers together at the beginning of a line that are then followed by a dash”.\nIf you capture that matching pattern as a group, you can then replace that group with parentheses outside it, no matter what the contents of the group. If that saved group is called $1 then you can replace it with ($1) and it doesn’t matter if $1 is equal to “512-” or “301-”."
  },
  {
    "objectID": "index.html#special-characters-commands-and-escape",
    "href": "index.html#special-characters-commands-and-escape",
    "title": "Wrangling Regular Expressions",
    "section": "Special characters, commands and escape",
    "text": "Special characters, commands and escape\nLet’s touch quickly on the syntax of regular expressions. Don’t get hung up if these sound like gibberish, because it will make sense more when we start using it. This Cheatsheet comes in handy here.\nRegular expressions use special characters to do special things, like match the beginning of a line. These commands are called tokens. Some examples:\n^ will find the beginning of a line\n* will find “zero or more” of whatever precedes it.\nRegular expressions use the backslash (the one above return on a keyboard where the top tips to the left) with other characters to create more tokens to do special things:\n\\d will find any number character (or digit).\n\\D will match anything other than a number.\n\\t is a tab character, because hitting the tab on the keyboard will perform the action instead of giving you the character.\nBut then sometimes, you actually need to find the character ^, and not use it as a command. Regular expressions use the  to give the literal expression of a character that would otherwise be a token:\n\\* will find the asterisk character instead of the token to find “zero or more”."
  },
  {
    "objectID": "index.html#defining-our-goal",
    "href": "index.html#defining-our-goal",
    "title": "Wrangling Regular Expressions",
    "section": "Defining our goal",
    "text": "Defining our goal\nWe’re going to use regular expressions to split complicated address data into individual parts. The sample we’ll use is a column from some City of Austin data published on their Socrata open data portal.\nIt had all the address parts crammed into a single field. Regex can easily explode that into individual columns, which is more useful to us.\nSo, our goal is to turn this …\n\"10111 N LAMAR BLVD\nAUSTIN, TX 78753\n(30.370945933000485, -97.6925542359997)\"\n\"2620 LAKE AUSTIN BLVD\nAUSTIN, TX 78703\n(30.28190796500047, -97.77587573499966)\"\n… into this, with each address part separated with a tab:\n10111 N LAMAR BLVD  AUSTIN  TX  78753    30.370945933000485  -97.6925542359997\n2620 LAKE AUSTIN BLVD   AUSTIN  TX  78703   30.28190796500047   -97.77587573499966\nWith this change, we can copy/paste the results into a spreadsheet."
  },
  {
    "objectID": "index.html#the-goal-in-a-nutshell",
    "href": "index.html#the-goal-in-a-nutshell",
    "title": "Wrangling Regular Expressions",
    "section": "The goal in a nutshell",
    "text": "The goal in a nutshell\nWe are building a pattern in our regular expression field, creating “capture groups” for each part of the address that we want to keep. We’ll continue the pattern outside the group until we get to the next part we want to keep, when we’ll create a new group, and so on.\nYou’ll want to reference your Regex-Cheatsheet.docx or Regular-expressions-syntax.pdf in the resources folder.\nLet’s get started:\n\nFrom Visual Studio Code where you are working with this, click on the file data/socrata_addresses_copy.txt to open it.\n\nNote this is just one column from a larger Socrata data set of restaurant inspection scores in Austin, TX. (When I want to clean a single column of data, I often download the data and will just copy out one column into my text editor and work it before pasting back the results into a new Excel column, carefully making sure they still line up.)\nLet’s look at our data a little closer. This example from the top of the file is just one “cell” of data, even though it has multiple lines of text\n\"10111 N LAMAR BLVD\nAUSTIN, TX 78753\n(30.370945933000485, -97.6925542359997)\"\nThe address, city, state, zip, latitude and longitude are all in the same “cell” (what is inside the quote marks), but the content of the cell has returns in it. We want to split these six distinct pieces into their own columns for each record. Why? Many reasons, but one is to use the latitude and longitude for data visualizations.\nWe will build a Regular Expression pattern to Find and capture six groups of text and then Replace those groups with tabs between them so we can put them back into a spreadsheet as columns."
  },
  {
    "objectID": "index.html#building-our-find-pattern",
    "href": "index.html#building-our-find-pattern",
    "title": "Wrangling Regular Expressions",
    "section": "Building our Find pattern",
    "text": "Building our Find pattern\n\nIn your data/socrata_addresses_copy.txt file, do Command-option-f to open the Find and Replace box. (Or menu: Edit &gt; Replace)\nThe Find/Replace window will open at the top right.\nNext to Find you’ll find some options. Click on the one that is a period-asterisk: .*\n\n\n\nFind and Replace prompt\n\n\n\n\nCapturing the address\nWe’ll begin entering tokens into the “Find” prompt so we can see how to use tokens to capture patterns. In some cases, we’ll “capture” the pattern using parentheses, so we can refer back to it later.\nWe know that the first line starts at the beginning of the line, so we can start with this token: ^.\n\nAdd the ^ to the Find prompt.\nYou’ll see that the first character of each line is now highlighted.\nNext we want to add the double-quote so we can continue the pattern from the beginning of each address. Add a double-quote after the first token, like this:\n^\"\nYou’ll notice that now only the double-quote marks are selected.\n\n\n\nFirst quote selected\n\n\nNext, we’ll start our first capture group with parentheses:\n^\"()\nYou’ll see as you type in the open parentheses that you’ll get an “error” in the Find box because it expects a closing parentheses. Make sure you add that, then put your cursor back between them.\nNow, inside those parentheses, we’ll add .* so the full line looks like this:\n^\"(.*)\nYou’ll see that the rest of the line has been selected.\nInside the parentheses (our first group), we want to capture the whole address, which is everything until the end of the line. The period token . means “any character”, and * means “zero or more”, so put these together and we get everything: ^\"(.*).\n\n\n\nAddress line\n\n\n\n\n\n\n\n\n\nNew lines differe between Mac and PCs\n\n\n\nBefore we can start capturing the second group with the city, we need to add the “return” to the pattern so it can start recognizing the next line. But here’s the drive-you-crazy thing: Windows and Macs treat these differently. On a Mac, \\n is a “new line”. If you are on a Windows machine, you’ll need to use \\R. My screenshots use a Mac, so if we end up with PC’s in this lab, you’ll need to use \\R every time you see \\n in this tutorial.\n\n\n\nAdd \\n to the end of the string to make:\n^\"(.*)\\n\n\n\n\nAddress line with return\n\n\n\n\n\nCapturing the city\nAs we look through the list, you can see we have some cities with more than one word – like “BEE CAVE” – so we need a way to capture both letters and spaces, but not other punctuation. There are MANY ways to do this, but we’ll use a “character set” to show how to use more than one token at a time:\n\nFirst, create a new group:\n^\"(.*)\\n()\nThen inside the group, we have to build the “character set” using square brackets. Inside those brackets we’ll ad a \\w token to catch any word character, and a space so we can catch those, too. Lastly, we put a + token right after the character set to signify we want “one or more”:\n^\"(.*)\\n([\\w ]+)\n\n\n\nCity captured\n\n\n\n\n\nCapturing the state\nThese addresses are all in TX, so we don’t really have to save it at all, but we will. We’ll use this to remind ourselves that you can also just match a string literally.\n\nFirst we put the comma and space outside the second group, since we don’t want to keep it:\n^\"(.*)\\n(\\w+),\n\n\n\nCity with comma and space\n\n\nYou can’t see that trailing space in the image above, but make sure it is there.\nThen we create our third group with TX inside it:\n^\"(.*)\\n([\\w ]+), (TX)\n\n\n\nAdding TX\n\n\n\nWe choose to find the literal text “TX” because there are no other states in this data set. We can’t skip it because we need the pattern to continue.\n\n\nCapturing the ZIP\nAgain, we don’t want to keep the space between the state and ZIP, so we’ll put it outside the third group.\n\nAdd the comma, space and new group to start our fourth group:\n^\"(.*)\\n([\\w ]+), (TX) ()\nAll of these zip codes are of the 5-digit variety, so this can be less complicated than it might be with 9-digit ZIPs. Again, there are many ways to do this, but we’ll use \\d for the numbers and * to capture zero or more of them. Add those inside the capture group:\n^\"(.*)\\n([\\w ]+), (TX) (\\d*)\nComplete the pattern for this line with the new line token \\n. (NOTE: Remember to change the \\n to \\R if we are on PCs):\n^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\n\n\n\nZip captured to end of line\n\n\n\n\n\nCapturing latitude\n\nWe don’t want to keep the parentheses that starts this last line, so we’ll put it outside any capture group. However, since parentheses mean something special in regex, we need to escape it with a backslash so it will find the character and not start the new group:\n^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(\nNow we can start our new group, so go ahead and add the beginning and end parentheses:\n^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(()\nInside our fifth group, we need numbers and the decimal point. We will create a character set using square brackets and put inside it \\d for numbers and \\. for the decimal point, which we have to escape since . means “any character”. We finish it off by using + to look for one or more of the characters in the set. Like this:\n^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(([\\d\\.]+)\n\n\n\nLatitude captured\n\n\n\n\n\nCapturing longitude\n\nWe don’t need the comma and space in our next group, so we put it outside to keep the pattern going:\n^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(([\\d\\.]+),\nWe can get the longitude like we did latitude, but we have to add the hyphen to the character set. So, create the group:\n^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(([\\d\\.]+), ()\nAdd the character set:\n^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(([\\d\\.]+), ([])\nAnd inside of it, put \\d for digits, \\- for the hyphen and \\. for the decimal point:\n^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(([\\d\\.]+), ([\\d\\-\\.])\nAdd our quantifier to get one or more:\n^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(([\\d\\.]+), ([\\d\\-\\.]+)\nBecause the trailing parentheses and quote are at the end of a line, we could ignore them, but we won’t. We’ll add them to the end of the pattern, escaping the close parentheses just to be sure:\n^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(([\\d\\.]+), ([\\d\\-\\.]+)\\)\"\n\n\n\nLongitude captured"
  },
  {
    "objectID": "index.html#the-replace-string",
    "href": "index.html#the-replace-string",
    "title": "Wrangling Regular Expressions",
    "section": "The Replace string",
    "text": "The Replace string\nNow that we have a pattern with our six groups of data, we keep or exclude them in any order we want using the Replace prompt and the replace all icon.\nOur goal is to bring back six of our groups, but to put tabs in between each of them. If we can build a search and replace like this, then we can paste the result back into Excel, and each group will become its own column.\nA quick refresher from our intro: Once we’ve built a group, we can reference it in our substitution string by order in which we captured it. So, if we want to reference our first group, we use this: $1.\n\nAdd this to the Replace prompt:\n$1\nClick the second icon next to the replace string (which is replace all):\n\n\n\nThe replace all button\n\n\nNow that you’ve seen that, do Edit &gt; Undo to put our data back!\nI wasn’t trying to scare you there, but you needed to see how replacing with a capture group worked.\nUpdate the Replace string to add a tab token \\t between each group.\n$1\\t$2\\t$3\\t$4\\t$5\\t$6\nAnd then use the replace all icon to do the Find/Replace on all rows.\n\n\n\nWe did it!\n\n\n\n\nAdd to Excel or Google Sheets\nThe way this text is structured, you can copy it all and then paste it into an Excel or Google Sheets spreadsheet and you should get six distinct rows.\n\n\n\nSheets gif"
  },
  {
    "objectID": "index.html#more-regex",
    "href": "index.html#more-regex",
    "title": "Wrangling Regular Expressions",
    "section": "More Regex",
    "text": "More Regex\nThere are lots of sites and tutorials on regular expressions, but regular-expressions.info is one of my favorites.\nAnd remember, if you are stumped by something, chances are you are not the first. Google and Stack Overflow are your friends. ChatGPT might be helpful, too, if you are good at prompts."
  },
  {
    "objectID": "regex101.html",
    "href": "regex101.html",
    "title": "Wrangling data with Regular Expressions",
    "section": "",
    "text": "An oft-quoted saying\n\n\n\nSome people, when confronted with a problem, think …\n“I know, I’ll use regular expressions.”\nNow they have two problems.\n– Discussion about the source of the quote."
  },
  {
    "objectID": "regex101.html#dont-fear-the-regex",
    "href": "regex101.html#dont-fear-the-regex",
    "title": "Wrangling data with Regular Expressions",
    "section": "Don’t fear the regex",
    "text": "Don’t fear the regex\nA regular expression (regex or regexp for short) is a special text string for describing a search pattern. Searching text with a pattern instead for a specific string of characters can be VERY useful for cleaning data. The concept is available in many programming languages and tools.\nThis lesson explains what regular expressions are, how they can be useful in your everyday life as a journalist, and reveals ONE SIMPLE CONCEPT that can change your life.\nWhile we’ll use regex101.com to learn the syntax, that site can handle only so much data. In practice, I tend to use regex101 to test my patterns on sample data, but then execute them in a spreadsheet formula, code editor or in a programming language like R or Python.\nLinks you will need in a browser:\n\nbit.ly/nicar-regex (this document)\nregex101.com\nbit.ly/nicar-regex-sample\nbit.ly/nicar-regex-cheats\n\nNOTE: When you use the bit.ly links above you may get an advertising page before you get to the target page. You can just click Continue to destination to get past it.\nKey concept: patterns Let’s say you have a list of phone numbers in 10-digit format – 512-555-1212 – but you want the area code to be in parenthesis: (512) 555-1212. You could do a simple search of the 512 area code followed by a dash 512- and replace it with an area code in parenthesis and a space: (512).\nBut what if there are different area codes in the list?\n512-555-1211\n301-333-1212\n404-123-1213\nWith regular expressions, you can search for a pattern of characters. Instead of searching just for 512-, you can look for “three numbers together at the beginning of a line that are then followed by a dash”.\nIf you capture that matching pattern as a group, you can then replace that group with parenthesis outside it, no matter what the contents of the group. If that saved group is called $1 then you can replace it with ($1) and it doesn’t matter if $1 is equal to 512- or 301-."
  },
  {
    "objectID": "regex101.html#special-characters-commands-and-escape",
    "href": "regex101.html#special-characters-commands-and-escape",
    "title": "Wrangling data with Regular Expressions",
    "section": "Special characters, commands and escape",
    "text": "Special characters, commands and escape\nLet’s touch quickly on the syntax of regular expressions. Don’t get hung up if these sound like gibberish, because it will make more sense when we start using it. Your Regex Cheat Sheet (or this alternative) comes in handy here.\nRegular expressions use special characters to do special things, like match the beginning of a line. These commands are called tokens:\n\n^ will find the beginning of a line.\n* will find “zero or more” of whatever precedes it.\n\nRegular expressions use the backslash (the one above return on the keyboard: \\) with other characters to create more tokens to do special things:\n\n\\d will find any number character (or digit).\n\\D will match anything other than a number.\n\\t is a tab character, because hitting the tab on the keyboard will perform the action instead of giving you the character.\n\nBut then sometimes, you actually need to find the character ^, and not use it as a command. Regular expressions use the  to give the literal expression of a character that would otherwise be a token:\n\n\\* will find the asterisk character instead of modifying the query to find “zero or more”.\n\nEnough of that. Let’s do this, with the help of …"
  },
  {
    "objectID": "regex101.html#regex101.com",
    "href": "regex101.html#regex101.com",
    "title": "Wrangling data with Regular Expressions",
    "section": "Regex101.com",
    "text": "Regex101.com\nRegex101 is a great way to not only build regex patterns, but to also learn how they work. Go ahead and launch that site in a browser so we can work with it here in a minute.\nWe’re going to use this tool to split complicated address data into individual parts. Let’s talk about the data first."
  },
  {
    "objectID": "regex101.html#splitting-socrata-addresses",
    "href": "regex101.html#splitting-socrata-addresses",
    "title": "Wrangling data with Regular Expressions",
    "section": "Splitting Socrata addresses",
    "text": "Splitting Socrata addresses\nMany government agencies use software run by Tyler Technologies as their open data portal: From Austin to Boston; from Los Angeles to New York. The platform was once called Socrata.\nSome of the data sets in Austin have all the address parts crammed into a single field. Regex can easily explode that into individual columns.\nSo, our goal is to turn this:\n\ninto this:\n\n\nThe goal in a nutshell\nWe are building a pattern in our regular expression field, creating a group to capture each part of the address that we want to keep. We’ll continue the pattern outside the group until we get to the next part we want to keep, when we’ll create a new group, and so on.\nYou’ll want to reference your Regex Cheat Sheet (or this alternative.\nLet’s get started:\n\nGo to this link socrata_addresses.txt will just open in a browser. Copy the contents of that screen.\n\nSome browsers might download the files instead of viewing. If so, go to this page and use the copy button in the tools there to get the content.\n\nIf not there already, go to regex101.com and then paste that text into the “TEST STRING” field.\nNote this is just one column from a larger Socrata data set of restaurant inspection scores in Austin, TX. (Sometimes when I want to clean a single column of data, I’ll just copy out one column into my text editor and work it before pasting back the results into Excel, carefully making sure they still line up.)\nLet’s look at our data a little closer. This is really two rows of data, even though there are six lines of text here:\n\nNotice the address, city, state, zip, latitude and longitude are all in the same “cell” (what is inside the quote marks), but the content of the cell has returns in it. We want to split these six distinct pieces into their own columns for each record. Why? Many reasons, but one is to use the latitude and longitude for data visualizations.\nWe will build a Regular Expression pattern to search and capture six groups of text and then replace those groups with tabs between them so we can put them back into Excel as columns.\nIn regex101, in the right-hand box of the REGULAR EXPRESSION string, make sure there is a green /gm listed. If not, click on the / and choose the first two options “global” and “multiline”. 1\n\n\n\nCapturing the address\nFor the next while, we’ll be building our expression in the REGULAR EXPRESSION field in regex101. So when I say add or edit the expression, that’s where we are doing it.\n\nWe know that the first line starts at the beginning of the line, so we can start with this token, which signifies that: ^\nNow, in the end, we don’t want to keep the double-quote, so we won’t put it inside a group. We’ll just add it to the pattern: ^\"\nThis is what it looks like:\n\nTake note of the number of matches at the top right: There are 325 matches, and that is how many records we should end up with. You’ll want to keep referring back to that and making sure you have 325 groups.\nNext, we’ll start our first capture group by adding parenthesis: ^\"(). You’ll see as you type in the first parentheses, regex101 might also put in the second and then put your cursor in the middle of them. This is “code completion”, and good code editors do this to help you be more efficient. (If not, no big deal … just add it. It’s a setting you can adjust later.)\nInside the parenthesis (our first group), we want to capture the whole address, which is everything until the end of the line. The period token . means “any character”, and * means “zero or more”, so put these together and we get everything: ^\"(.*).\nLet’s take a minute to explain more about Regex101 and how it helps you.\n\nEach matching group gets a color, and the contents of the match is shown in MATCH INFORMATION. The EXPLANATION section tells you exactly how each token is used, and the QUICK REFERENCE section is a list of tokens you can use, more in depth than the cheat sheet I’ve started you with.\nOK .. on with it.\nBefore we can start capturing the second group with the city, we need to add a return to the pattern (we’ll use the token \\n) so it can start recognizing the next line. So add that at the end: ^\"(.*)\\n.\n\n\n\n\n\n\n\nWarning\n\n\n\nWindows and MacOS treat new line tokens differently. On a Mac, \\n is a “new line”, but Windows uses \\R. The regex101 editor will recognize either, but later I’ll demonstrate doing a search and replace in a code editor, and if you are following along you must use the character that works with your operating system. This tutorial is written from a Mac perspective, so I use \\n. If you are on a PC, you might use \\R every time you see \\n in this tutorial.\n\n\nSanity check: This what your screen should look like:"
  },
  {
    "objectID": "regex101.html#capturing-the-city",
    "href": "regex101.html#capturing-the-city",
    "title": "Wrangling data with Regular Expressions",
    "section": "Capturing the city",
    "text": "Capturing the city\nNow, let’s grab the city. As we look through the list, we can see there is more than Austin, and some of these names have spaces so we can’t find just letters alone.\n\nThere are MANY ways to do this, but we’ll do it here by creating a group first: ^\"(.*)\\n().\nThen inside the group we’ll put a token that looks for word characters: ^\"(.*)\\n(\\w).\nThen we’ll add the quantifier + to find “one or more” of what’s in the character set: ^\"(.*)\\n(\\w+).\n\nMake sure we are capturing all 325 groups. We should be good."
  },
  {
    "objectID": "regex101.html#capturing-the-state",
    "href": "regex101.html#capturing-the-state",
    "title": "Wrangling data with Regular Expressions",
    "section": "Capturing the state",
    "text": "Capturing the state\nThese are all the same in this data, all in TX, so we don’t really have to save it at all, but we will. We’ll use this to remind ourselves that you can also just match a string literally.\n\nFirst we put the comma and space outside the second group, since we don’t want to keep it: ^\"(.*)\\n(\\w+),.\n\n\nCatching errors\nNow, take a moment and check how many matching groups we have. Wait … WHOA … we have only 314. What could’ve gone wrong?\n\nScroll down the Test string until you find something amiss. The colors help you spot problems easily.\n\n\nWhat is the difference between the working lines and the ones that aren’t? Something about the city.\nBEE CAVE and WEST LAKE HILLS have spaces while AUSTIN and PFLUGERVILLE do not. It looks like our city group did not capture a needed space, which wasn’t really revealed until we tried to carry out the pattern with the , that is found after the city. This happens a lot … we need to back up and fix the error.\nRight now, our expression is this: ^\"(.*)\\n(\\w+), and the part that captures the city is (\\w+). We need to use something called a “character set” that allows us to include more than one token within a group. We signify this by putting what we want inside of square brackets: So we need to put the \\w inside square brackets along with the space so we can catch both: ^\"(.*)\\n([\\w ]+),.\n\n\nBack to the state\n\nThen we create our third group with TX inside it: ^\"(.*)\\n([\\w ]+), (TX). We are looking for the literal text TX because there are no other states in this data set. We can’t skip it because we need the pattern to continue.\n\nSanity check. Here is what you should have:"
  },
  {
    "objectID": "regex101.html#capturing-the-zip",
    "href": "regex101.html#capturing-the-zip",
    "title": "Wrangling data with Regular Expressions",
    "section": "Capturing the ZIP",
    "text": "Capturing the ZIP\n\nAgain, we don’t want to keep the space between the state and ZIP, so we’ll put it outside the third group, and start our fourth one for ZIP: ^\"(.*)\\n([\\w ]+), (TX) ().\nAll of these zip codes are of the 5-digit variety, so this can be less complicated than it might be with 9-digit ZIPs. Again, there are many ways to do this, but we’ll use \\d for the numbers and * to capture zero or more of them: ^\"(.*)\\n([\\w ]+), (TX) (\\d*).\nComplete the pattern for this line with the new line token: ^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n.\n\nSanity check. This is where we are:"
  },
  {
    "objectID": "regex101.html#capturing-latitude",
    "href": "regex101.html#capturing-latitude",
    "title": "Wrangling data with Regular Expressions",
    "section": "Capturing latitude",
    "text": "Capturing latitude\n\nWe don’t want to keep the parenthesis that starts this last line, so we’ll put it outside a group. However, since parenthesis mean something special in regex, we need to escape it with a backslash so it will find the character and not start the new group: ^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(. Code completion might make this tricky, but you can do it!\n\n\nNow we can start our new group, so go ahead and add the beginning and end parentheses: ^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(().\nInside our fifth group, we need numbers and the decimal point. We will create a character set using square brackets and put inside it \\d for numbers and \\. for the decimal point, which we have to escape since . means “any character”. We finish it off by using + to look for one or more of the characters in the set. Like this: ^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(([\\d\\.]+)."
  },
  {
    "objectID": "regex101.html#capturing-longitude",
    "href": "regex101.html#capturing-longitude",
    "title": "Wrangling data with Regular Expressions",
    "section": "Capturing longitude",
    "text": "Capturing longitude\n\nWe don’t need the comma and space in our next group, so we put it outside to keep the pattern going: ^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(([\\d\\.]+),.\nWe can get the longitude like we did latitude, but we have to add the hyphen to the character set. So, create the group: ^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(([\\d\\.]+), ().\nAdd the character set: ^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(([\\d\\.]+), ([]).\nAnd inside of it, put \\d for digits, \\- for the hyphen and \\. for the decimal point: ^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(([\\d\\.]+), ([\\d\\-\\.]). Add our quantifier to get one or more: ^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(([\\d\\.]+), ([\\d\\-\\.]+). Because the trailing parentheses and quote are at the end of a line, we could ignore them, but we won’t. We’ll add them to the end of the pattern, escaping the close parentheses just to be sure: ^\"(.*)\\n([\\w ]+), (TX) (\\d*)\\n\\(([\\d\\.]+), ([\\d\\-\\.]+)\\)\".\n\n\nYou have it all! 325 matches into 6 different groups."
  },
  {
    "objectID": "regex101.html#the-substitution-string",
    "href": "regex101.html#the-substitution-string",
    "title": "Wrangling data with Regular Expressions",
    "section": "The substitution string",
    "text": "The substitution string\nNow that we have a pattern with our six groups of data, we can substitute them in any order we want using a search and replace, and we can build our substitution string right here in Regex101 as well.\nIn the left-hand navigation under the FUNCTION heading, click on the item called Substitution. That should expand the SUBSTITUTION window.\n\nNow we can build a substitution string, and we can see the cleaned data in the window below.\nOur goal with the substitution string is to pull back our six groups, but to put tabs in between each of them. If we can build a search and replace like this, then we can paste the result back into Excel, and each group will become its own column.\nA quick refresher from our intro: Once we’ve built a group, we can reference it in our substitution string by order in which we captured it. So, if we want to reference our first group, we use this: $1.\n\nPut that in the SUBSTITUTION string box, like this:\n\nYou can see that Regex101 is now pulling back our address.\nWe can’t just type a tab key after our group because they keyboard command will move us to another box, so we use the token for tab, which is \\t.\nSo, add that to the end of our substitution string to get this: $1\\t. You’ll see space get added into our substitution example.\nNow we can add our next ordered group to our substitution string and see our city get added on: $1\\t$2.\nHere is a sanity check:\n\nNow that you see how it works, let’s go ahead and add the rest of the groups, all with tabs in between them: $1\\t$2\\t$3\\t$4\\t$5\\t$6. Your screen might look a little different than below if the lines start wrapping.\n\n\nNow, you might try copy ‘n’ pasting this result into Excel or Google Sheets and it will become six distinct columns."
  },
  {
    "objectID": "regex101.html#limitations-of-regex101",
    "href": "regex101.html#limitations-of-regex101",
    "title": "Wrangling data with Regular Expressions",
    "section": "Limitations of regex101",
    "text": "Limitations of regex101\nThis can work fine for a small data set, but things bog down on the site if you have many rows or columns of data. I often use regex101 with sample text to figure out my patterns, but then use them in a text editor or within a R or Python script. You can see how to use regex in Find/Replace for various text editors below.\nYou can actually save this example in regex101 under SAVE & SHARE in the top left panel. If you create a login with regex101 you can keep a dashboard of them.\nMy example is saved here: https://regex101.com/r/dVFG6T/2/\n\nReporting with Data students can stop here and save your regex101 link and submit it in Canvas. I’ll demo the rest in class."
  },
  {
    "objectID": "regex101.html#search-and-replace-in-the-text-editor",
    "href": "regex101.html#search-and-replace-in-the-text-editor",
    "title": "Wrangling data with Regular Expressions",
    "section": "Search and replace in the text editor",
    "text": "Search and replace in the text editor\nWe are almost done. Go ahead and launch your text editor if you haven’t already. I’ll show this first in Visual Studio Code.\nTake your TEST STRING data (not the expression, but the data) and paste it into a new next file in your text editor. (Or grab it from the file you downloaded.) Go under the Edit menu to Replace (or do control-H for PC, command-option-F for Mac) to bring up the search window. Copy the Regular Expression pattern you built in Regex101 and insert into the Find text field in VS Code. Copy the Substitution pattern and insert it into the Replace field. Click on the button on the far-right of the Find line, the one that has .* in it.\nHere is what the search and replace screen looks like in VS Code:\nNow, hit the “Replace All” button to the far-right of the Replace field and watch the magic happen. Once you run the search and replace, you can copy and paste the results into a spreadsheet and it will be six distinct columns. (If it doesn’t, hollar.)\nMore Regex There are lots of sites and tutorials on regular expressions, but http://www.regular-expressions.info/ is one of my favorites.\nAnd remember, if you are stumped by something, chances are you are not the first. Google and Stack Overflow are your friends. ChatGPT might be helpful, too, if you are good at prompts."
  },
  {
    "objectID": "regex101.html#using-a-code-editor",
    "href": "regex101.html#using-a-code-editor",
    "title": "Wrangling data with Regular Expressions",
    "section": "Using a code editor",
    "text": "Using a code editor\nWe are almost done. Go ahead and launch your text editor if you haven’t already. I’ll show this in Visual Studio Code.\n\nTake your TEST STRING data (not the expression, but the data) and paste it into a new next file in your text editor. (Or grab it from the file you downloaded.)\nGo under the Edit menu to Replace (or do control-H for PC, command-option-F for Mac) to bring up the search window.\nCopy the Regular Expression pattern you built in Regex101 and insert into the Find text field in VS Code.\nCopy the Substitution pattern and insert it into the Replace field.\nClick on the button on the far-right of the Find line, the one that has .* in it.\nHere is what the search and replace screen looks like in VS Code:\n\nNow, hit the “Replace All” button to the far-right of the Replace field and watch the magic happen.\n\nOnce you run the search and replace, you can copy and paste the results into a spreadsheet and it will be six distinct columns. (If it doesn’t, hollar.)"
  },
  {
    "objectID": "regex101.html#more-regex",
    "href": "regex101.html#more-regex",
    "title": "Wrangling data with Regular Expressions",
    "section": "More Regex",
    "text": "More Regex\nThere are lots of sites and tutorials on regular expressions, but http://www.regular-expressions.info/ is one of my favorites.\nAnd remember, if you are stumped by something, chances are you are not the first. Google and Stack Overflow are your friends. ChatGPT might be helpful, too, if you are good at prompts."
  },
  {
    "objectID": "regex101.html#footnotes",
    "href": "regex101.html#footnotes",
    "title": "Wrangling data with Regular Expressions",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nOn the modifier “gm”: The “g” is for “global”, as in find all occurrences, not just the first one. The “m” is for “multi-line”, which allows us to evaluate each line separately. I almost always use “gm” when doing search and replace like this.↩︎"
  }
]